// Mocks generated by Mockito 5.4.0 from annotations
// in sefer/test/features/authentication/presentation/bloc/authentication_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sefer/core/errors/failures.dart' as _i6;
import 'package:sefer/features/authentication/domain/entities/auth_result.dart'
    as _i7;
import 'package:sefer/features/authentication/domain/entities/user_credentials.dart'
    as _i8;
import 'package:sefer/features/authentication/domain/repositories/authentication_repository.dart'
    as _i2;
import 'package:sefer/features/authentication/domain/usecases/login_user.dart'
    as _i4;
import 'package:sefer/features/authentication/domain/usecases/logout_user.dart'
    as _i10;
import 'package:sefer/features/authentication/domain/usecases/register_user.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthenticationRepository_0 extends _i1.SmartFake
    implements _i2.AuthenticationRepository {
  _FakeAuthenticationRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUser extends _i1.Mock implements _i4.LoginUser {
  MockLoginUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthenticationRepository get authenticationRepository =>
      (super.noSuchMethod(
        Invocation.getter(#authenticationRepository),
        returnValue: _FakeAuthenticationRepository_0(
          this,
          Invocation.getter(#authenticationRepository),
        ),
      ) as _i2.AuthenticationRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.AuthResult>> loginUser(
          _i8.UserCredentials? userCredential) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginUser,
          [userCredential],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.AuthResult>>.value(
            _FakeEither_1<_i6.Failure, _i7.AuthResult>(
          this,
          Invocation.method(
            #loginUser,
            [userCredential],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.AuthResult>>);
}

/// A class which mocks [RegisterUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterUser extends _i1.Mock implements _i9.RegisterUser {
  MockRegisterUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthenticationRepository get authenticationRepository =>
      (super.noSuchMethod(
        Invocation.getter(#authenticationRepository),
        returnValue: _FakeAuthenticationRepository_0(
          this,
          Invocation.getter(#authenticationRepository),
        ),
      ) as _i2.AuthenticationRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.AuthResult>> registerUser(
          dynamic userCredentials) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerUser,
          [userCredentials],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.AuthResult>>.value(
            _FakeEither_1<_i6.Failure, _i7.AuthResult>(
          this,
          Invocation.method(
            #registerUser,
            [userCredentials],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.AuthResult>>);
}

/// A class which mocks [LogoutUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogoutUser extends _i1.Mock implements _i10.LogoutUser {
  MockLogoutUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthenticationRepository get authenticationRepository =>
      (super.noSuchMethod(
        Invocation.getter(#authenticationRepository),
        returnValue: _FakeAuthenticationRepository_0(
          this,
          Invocation.getter(#authenticationRepository),
        ),
      ) as _i2.AuthenticationRepository);
  @override
  _i5.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
